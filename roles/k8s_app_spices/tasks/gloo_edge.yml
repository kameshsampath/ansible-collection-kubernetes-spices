---
- name: Check if glooctl is installed
  command:
    argv:
      - glooctl
      - version
  register: glooctl_result
  ignore_errors: True
  changed_when: False

- name: Set glooctl macOS download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/glooctl-darwin-amd64"
  when: glooctl_result.rc != 0 and ansible_os_family == "Darwin"

- name: Set glooctl Linux download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/glooctl-linux-amd64"
  when: glooctl_result.rc != 0 and (ansible_os_family == "RedHat" or ansible_os_family == "CentOS" or ansible_os_family == "Debian")

- name: Set glooctl Windows download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/{{ glooctl_version }}/glooctl-windows-amd64.exe"
  when: glooctl_result.rc != 0 and ansible_os_family == "Windows"

- name: Create user local bin directory
  file:
    path: "{{ansible_env.HOME}}/.local/bin"
    state: directory
  when: glooctl_result.rc != 0

- name: Download glooctl binary
  get_url:
    url: "{{ glooctl_download_binary }}"
    dest: "{{ansible_env.HOME}}/.local/bin/glooctl"
    checksum: "sha256:{{glooctl_download_binary}}.sha256"
    mode: "0755"
  when: glooctl_result.rc != 0
  register: downloaded_glooctl

- name: set glooctl binary fact
  set_fact:
    glooctl_binary: "{{ansible_env.HOME}}/.local/bin/glooctl"

    
################################################################################
## Gloo Edge community
################################################################################

- name: "Add Gloo Community chart repo"
  kubernetes.core.helm_repository:
    name: gloo
    repo_url: "https://storage.googleapis.com/solo-public-helm"
  when: gloo_edge_edition == 'ce'

- name: "Deploy Gloo Edge community"
  kubernetes.core.helm:
    release_name: gloo
    chart_ref: "gloo/gloo"
    values: "{{ lookup('template', 'gloo/' + gloo_edge_edition + '/install-overrides.yaml.j2') | from_yaml }}"
    release_namespace: "{{ gloo_write_namespace }}"
    create_namespace: true
    update_repo_cache: true
    wait: true
  when: gloo_edge_edition == 'ce'

################################################################################
## Gloo Edge Enterprise
################################################################################

- name: "Fail when enterprise license key is not provided"
  fail:
    msg: "No Enterprise License key provided"
  when: gloo_edge_edition == 'ee' and gloo_license_key is not defined

- name: "Add Gloo Edge enterprise chart repo"
  kubernetes.core.helm_repository:
    name: glooe
    repo_url: "https://storage.googleapis.com/gloo-ee-helm"
  when: gloo_edge_edition == 'ee'

#- name: "Debug Install values" 
#  debug: msg="{{ lookup('template', 'gloo/' + gloo_edge_edition + '/install-overrides.yaml.j2') | from_yaml }}"
  
- name: "Deploy Gloo Enterprise Gateway"
  kubernetes.core.helm:
    release_name: gloo
    chart_ref: "glooe/gloo-ee"
    values: "{{ lookup('template', 'gloo/' + gloo_edge_edition + '/install-overrides.yaml.j2') | from_yaml }}"
    release_namespace: "{{ gloo_write_namespace }}"
    create_namespace: true
    update_repo_cache: true
    wait: true
  register: glooee_install
  when: gloo_edge_edition == 'ee'

#- debug:
#    var: glooee_install
    
################################################################################
## Deploy Knative Ingress
################################################################################

- name: "Configure Knative Networking with Gloo"
  ansible.builtin.command:
    args:
      - "{{ glooctl_binary }}"
      - install
      - knative
      - --install-knative=false
  when: deploy_knative
  changed_when: false
