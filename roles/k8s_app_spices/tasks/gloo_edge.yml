---
- name: Check if glooctl is installed
  command:
    argv:
      - glooctl
      - version
  register: glooctl_result
  ignore_errors: True
  changed_when: False

- name: Set glooctl macOS download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/glooctl-darwin-amd64"
  when: glooctl_result.rc != 0 and ansible_os_family == "Darwin"

- name: Set glooctl Linux download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/glooctl-linux-amd64"
  when: glooctl_result.rc != 0 and (ansible_os_family == "RedHat" or ansible_os_family == "CentOS" or ansible_os_family == "Debian")

- name: Set glooctl Windows download binary
  set_fact:
    glooctl_download_binary: "https://github.com/solo-io/gloo/releases/download/v{{glooctl_version}}/{{ glooctl_version }}/glooctl-windows-amd64.exe"
  when: glooctl_result.rc != 0 and ansible_os_family == "Windows"

- name: Create user local bin directory
  file:
    path: "{{ansible_env.HOME}}/.local/bin"
    state: directory
  when: glooctl_result.rc != 0

- name: Download glooctl binary
  get_url:
    url: "{{ glooctl_download_binary }}"
    dest: "{{ansible_env.HOME}}/.local/bin/glooctl"
    checksum: "sha256:{{glooctl_download_binary}}.sha256"
    mode: "0755"
  when: glooctl_result.rc != 0
  register: downloaded_glooctl

- name: set glooctl binary fact
  set_fact:
    glooctl_binary: "{{ansible_env.HOME}}/.local/bin/glooctl"

- name: "Ensure gloo write namespace is in gloo watch namespaces"
  set_fact:
    gloo_watch_namespaces: "{{ gloo_watch_namespaces + [ gloo_write_namespace ] }}"

#- debug:
#    var: gloo_watch_namespaces

- name: "Create temporary gloo install directory"
  ansible.builtin.tempfile:
    state: directory
    prefix: "{{ 'gloo_' + gloo_edge_edition + '_' }}"
  register: gloo_install_tmpdir

#- debug:
#    var: gloo_install_tmpdir

- name: "Create Gloo {{ gloo_edge_edition }} Helm Values"
  template:
    src: "gloo/{{ gloo_edge_edition }}/install-overrides.yaml.j2"
    dest: "{{ gloo_install_tmpdir.path }}/install-overrides.yaml"
  register: gloo_install_override_file

- name: Add File to gloo install overrides
  set_fact:
    gloo_install_override_files: "{{ gloo_install_override_files + [gloo_install_override_file.dest] }}"

#- debug:
#    var: gloo_install_override_files

################################################################################
## Gloo Edge community
################################################################################

- name: "Add Gloo Community chart repo"
  kubernetes.core.helm_repository:
    name: gloo
    repo_url: "https://storage.googleapis.com/solo-public-helm"
  when: gloo_edge_edition == 'ce'

- name: "Deploy Gloo Edge community"
  kubernetes.core.helm:
    chart_ref: "gloo/gloo"
    release_name: gloo
    release_namespace: "{{ gloo_write_namespace }}"
    values_files: "{{ gloo_install_override_files }}"
    create_namespace: true
    update_repo_cache: true
    wait: "{{ true and gloo_proxy_nodeport }}"
    wait_timeout: 5m
  when: gloo_edge_edition == 'ce'

################################################################################
## Gloo Edge Enterprise
################################################################################

- name: "Fail when enterprise license key is not provided"
  fail:
    msg: "No Enterprise License key provided"
  when: gloo_edge_edition == 'ee' and gloo_license_key is not defined

- name: "Add Gloo Edge enterprise chart repo"
  kubernetes.core.helm_repository:
    name: glooe
    repo_url: "https://storage.googleapis.com/gloo-ee-helm"
  when: gloo_edge_edition == 'ee'

  #- name: "Debug Install values" 
  #  debug: msg="{{ lookup('template', 'gloo/' + gloo_edge_edition + '/install-overrides.yaml.j2') | from_yaml }}"

- name: "Deploy Gloo Enterprise Gateway"
  kubernetes.core.helm:
    release_name: gloo
    chart_ref: "glooe/gloo-ee"
    release_namespace: "{{ gloo_write_namespace }}"
    values_files: "{{ gloo_install_override_files }}"
    create_namespace: true
    update_repo_cache: true
    wait: "{{ true and gloo_proxy_nodeport }}"
  register: glooee_install
  when: gloo_edge_edition == 'ee'

  #- debug:
  #    var: glooee_install

- name: "Wait for Gloo Serving::discovery to be ready"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: discovery
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_discovery_enabled

- name: "Wait for Gloo Gateway::extauth to be ready"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: extauth
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Gateway::gateway to be ready"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: gateway
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport

- name: "Wait for Gloo Serving::gateway-proxy to be ready"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: gateway-proxy
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport

- name: "Wait for Gloo Serving::gloo to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: gloo
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport

- name: "Wait for Gloo Serving::gloo-fed to be ready"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: gloo-fed
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::gloo-fed-console to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: gloo-fed-console
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::glooe-grafana to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: glooe-grafana
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::glooe-prometheus-kube-state-metrics to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: glooe-prometheus-kube-state-metrics
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::glooe-prometheus-server to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: glooe-prometheus-server
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::observability to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: observability
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::rate-limit to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: rate-limit
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

- name: "Wait for Gloo Serving::redis to be ready "
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: redis
    deployment_namespace: "{{ gloo_write_namespace }}"
  when: not gloo_proxy_nodeport and gloo_edge_edition == 'ee'

################################################################################
## Deploy Knative Ingress
################################################################################

- name: "Configure Knative Networking with Gloo"
  ansible.builtin.command:
    args:
      - "{{ glooctl_binary }}"
      - install
      - knative
      - --install-knative=false
  when: deploy_knative
  changed_when: false
