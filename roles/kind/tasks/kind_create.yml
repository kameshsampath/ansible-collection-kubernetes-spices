---
- name: "Check if {{ cluster_name }} already exists"
  community.docker.docker_container_info:
    name: "{{ cluster_name + '-control-plane' }}"
  register: cluster_check_result

- name: Create KinD Config
  template:
    dest: "{{ kind_home_dir + '/' + cluster_name + '/' + kind_cluster_config }}"
    src: "kind-cluster-config.yml.j2"
    mode: "755"
  register: kind_cluster_config_file
  when: kind_create_config

- name: "Start KinD Cluster: '{{ cluster_name }}'"
  ansible.builtin.command:
    argv:
      - "{{ kind_binary }}"
      - create
      - cluster
      - --name={{ cluster_name }}
      - --config={{ kind_cluster_config_file.dest }}
  register: kind_cluster_result
  when: (cluster_config is not defined and not cluster_check_result.exists)

- name: Create and start KinD Registry
  community.docker.docker_container:
    state: started
    image: "registry:2"
    restart_policy: "always"
    name: "{{ container_registry_name }}"
    network_mode: "{{kind_network_name}}"
    published_ports:
      - "0.0.0.0:{{ container_registry_port }}:5000"

## Document KinD registry
- name: "Get KinD Cluster: '{{ cluster_name }}' kubeconfig"
  become: no
  ansible.builtin.command:
    argv:
      - "{{ kind_binary }}"
      - get
      - kubeconfig
      - --name={{ cluster_name }}
  register: kubeconfig_result

# - debug:
#    var: kubeconfig_result

# https://kind.sigs.k8s.io/docs/user/local-registry/
- name: "Document the local registry"
  kubernetes.core.k8s:
    state: present
    resource_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: local-registry-hosting
        namespace: kube-public
      data:
        localRegistryHosting.v1: |
          host: "localhost:${container_registry_port}"
          help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
  when: kind_cluster_result is defined

- name: "Create kubeconfig file"
  become: no
  ansible.builtin.copy:
    dest: "{{ kind_home_dir + '/' + cluster_name +'/config' }}"
    content: "{{ kubeconfig_result.stdout }}"
    mode: "0700"
    remote_src: true

- name: "Get {{ cluster_name }} Control Plane Ports"
  community.docker.docker_container_info:
    name: "{{ cluster_name }}-control-plane"
  register: control_plane_ports

- name: "Set {{ cluster_name }} Control Plane Ports Fact"
  set_fact:
    control_plane_port_mappings: "{{ control_plane_ports.container.NetworkSettings.Ports | kameshsampath.kubernetes_spices.port_mapping }}"
